---
import type { MarkdownHeading } from "astro";
import type { tocHeading } from "../consts";
import MdTocHeading from "./mdTocHeading.astro";

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;

const toc: tocHeading[] = buildToc(headings);

function buildToc(headings: MarkdownHeading[]): tocHeading[] {
  const toc: tocHeading[] = [];
  const parentHeadings: Map<number, tocHeading> = new Map();
  headings.forEach((h) => {
    const heading: tocHeading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 1) {
      toc.push(heading);
    } else if (parentHeadings.has(heading.depth - 1)) {
      parentHeadings.get(heading.depth - 1).subheadings.push(heading);
      // const parent = parentHeadings.get(heading.depth - 1);
      // if (parent) {
      //   parent.subheadings.push(heading);
      // }
    }
  });
  return toc;
}
---

<nav class="sticky top-9 p-1">
  <ul class="list-inside list-disc">
    {toc.map((heading) => <MdTocHeading heading={heading} />)}
  </ul>
</nav>
